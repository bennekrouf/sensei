output: grpc
level: info
server_id: "semantic-service"  # Identifies this service in the logs
client_id: "semantic-service"
grpc:
  # Keep original fields for logger compatibility
  address: "0.0.0.0"
  port: 50051 # Port where your grpc-logger server is running

# Add our new server configuration
server:
  address: "0.0.0.0"
  port: 50058 # Port where your sentence gRPC server runs

# Add endpoint client configuration
endpoint_client:
  default_address: "http://0.0.0.0:50055" # Default endpoint service URL if not provided via CLI
log_fields:
  include_thread_id: true
  include_target: true
  include_file: true
  include_line: true
  include_timestamp: true
client_retry:
  max_retries: 5000
  base_delay_secs: 1
  reconnect_delay_secs: 5
log_all_messages: false

debug_mode:
  enabled: false
  test_interval_secs: 10
  use_local_endpoints: false


# Model configurations
models:
  sentence_to_json:
    ollama: "llama2:latest"
    claude: "claude-3-7-sonnet-20250219"
    temperature: 0.1
    max_tokens: 1000
  find_endpoint:
    claude: "claude-3-7-sonnet-20250219"
    ollama: "deepseek-r1:8b"
    temperature: 0.1
    max_tokens: 500
  semantic_match:
    claude: "claude-3-7-sonnet-20250219"
    ollama: "deepseek-r1:8b"
    temperature: 0.1
    max_tokens: 500

# Provider configurations
providers:
  ollama:
    enabled: true
    host: "http://localhost:11434"
  claude:
    enabled: false  # Will be overridden by CLI flag
    api_key: ""     # Will be loaded from .env
